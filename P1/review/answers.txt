Task 1
Our group chose the model "Philosophers". The reason we chose the model is because it is based on the
"Dining philosophers problem", which is a simple and fun illustration of the problem of resource contention,
i.e. two programs access the same resource at the same time, and the model shows straightforwardly how
inappropriate use of those shared resources can lead to deadlocks.
There are 11 instances of this model, and we chose the instance of N=5, where N is the number of dining philosophers.

Task 2
Pattern 1: {Catc Foh1_1,rk_1} -> FF2a_1 -> Eat_1 (synchronization)
Transition "FF2a_1" has to consume tokens from the places "Fork_1" and "Catch1_1" at the same time to be enabled and be able
to produce a token for place "Eat_1". That is why it is a synchronization pattern. This can be interpreted that Fork 1 has to
be unused and Philosopher 1 has to be in a state where he is able to pick up Fork 1 (i.e. in state "Catch1_1) as one of the conditions
for Philosopher 1 to go to state "Eat"

Pattern 2: {FF2a_1, FF2b_1} -> Eat_1 -> End_1 (merging)
To produce a token for place "Eat_1" either transaction "FF2a_1" or "FF2b_1" need to be enabled, and in case both transactions are enabled
the tokens produced by "FF2a_1" and "FF2b_1" will be merged into one. In simple words no matter from which side Philosopher 1 picks his fork first
he can still got state "Eat" because the only condition for the state "Eat" is that the Philosophers need two forks in their hands.

Pattern 3: Fork_1 -> {FF2a_1, FF2b_2} (conflict)
- place "Fork_1" can pass its token either to transition "FF2a_1" making it enabled and able to produce token for place "Eat_1"
or to transition "FF2b_2" making it enabled and able to produce token for place "Eat_2"
- meaning: depending on how Fork_1 will pass its token, either Philosopher 1 or Philosopher 2 cannot eat,
because he is missing one fork, namely Fork_1

Task 3
Place: Fork_1
Max. number of token(s): 1
- place "Fork_1" represent the state of fork 1
- "Fork_1" contains a token -> fork 1 is unused
- "Fork_1" contains no token -> fork 1 is used by either Philosopher 1 or Philosopher 2
- since fork 1 can either be used or unused corresponding to token or no token, so
"Fork_1" only need one token



Task 4
a)
i) deadlock
There is a deadlock in the system.
To create a deadlock, we can fire the transitions “FF1a_1”, “FF1a_2”, “FF1a_3”, “FF1a_4” and “FF1a_5” in succession.
Now, all philosophers picked up the fork on their left side, so each philosopher only has one fork.
With that they are not able to eat because all the forks are taken,
and a philosopher can only go back to thinking after eating, so no transition can fire from this marking.

ii) dead transition(s)
Modification:
- Add an arc from place "Fork_1" to transition "FF1a_1"
Dead transition: FF2a_1

b)
liveness:  for every transition t, from every reachable marking, one can reach a marking in which t can fire.

As described in 4a.i, there is a reachable marking that is a deadlock, i.e. no transition can fire from that position / marking.
Therefore, the liveness porperty does not hold, since no transition can fire, and we cannot reach any transition whatsoever.


